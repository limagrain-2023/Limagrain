{"utilities":{},"programModules":{"EXT001MI":{"program":"EXT001MI","triggers":{},"transactions":{"ISPGetVATCodes":{"sourceUuid":"508ac32e-ae10-4688-a843-f94531ab82b8","name":"ISPGetVATCodes","program":"EXT001MI","description":"ALL_MI_0001_GetVATCodes","active":true,"multi":true,"modified":1678451218010,"modifiedBy":"APE_SMA","outputFields":[{"name":"DIVI","description":"division","length":3,"mandatory":false,"type":"A"},{"name":"VTCD","description":"VAT code","length":2,"mandatory":false,"type":"N"},{"name":"TX40","description":"description","length":40,"mandatory":false,"type":"A"},{"name":"VTD1","description":"nondeductible VAT 1","length":5,"mandatory":false,"type":"N"},{"name":"VTP1","description":"VAT rate 1","length":5,"mandatory":false,"type":"N"},{"name":"VTD2","description":"nondeductible VAT 2","length":5,"mandatory":false,"type":"N"},{"name":"VTP2","description":"VAT rate 2","length":5,"mandatory":false,"type":"N"},{"name":"FRDT","description":"from date","length":8,"mandatory":false,"type":"N"},{"name":"ONSR","description":"VAT on service","length":1,"mandatory":false,"type":"A"},{"name":"VATT","description":"VAT method","length":20,"mandatory":false,"type":"N"},{"name":"CSCD","description":"country","length":3,"mandatory":false,"type":"A"}],"inputFields":[],"utilities":[]}},"batches":{}}},"sources":{"508ac32e-ae10-4688-a843-f94531ab82b8":{"uuid":"508ac32e-ae10-4688-a843-f94531ab82b8","updated":1678451199074,"updatedBy":"APE_SMA","created":1671807143742,"createdBy":"RLO","apiVersion":"0.9","beVersion":"16.0.0.20221210044646.5","codeHash":"45C914E51D995BC38999BC0CEFAE9E6388D2F3D0A4503123CDF1622D3BAB3199","code":""}}}